C51 COMPILER V9.60.7.0   UART                                                              12/24/2024 04:00:53 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN .\Objects\uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE uart.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\uart
                    -.lst) TABS(2) OBJECT(.\Objects\uart.obj)

line level    source

   1          #include <reg51.h>
   2          #include <intrins.h>
   3          // Define LCD Pins
   4          sbit rs = P1^0;
   5          sbit rw = P1^1;
   6          sbit en = P1^2;
   7          
   8          // Define I2C Pins
   9          sbit SDA = P1^4; // I²C Data line
  10          sbit SCK = P1^5; // I²C Clock line
  11          
  12          
  13          
  14          
  15          void delay(int a);
  16          void uart_init();
  17          void uart_tx(char ch);
  18          char uart_rx();
  19          void lcd_cmd(unsigned char ch);
  20          void lcd_init();
  21          void lcd_data(unsigned char ch);
  22          void lcd_string(char *str);
  23          void i2c_start();
  24          void i2c_stop();
  25          void i2c_write(unsigned char mydata);
  26          unsigned char i2c_read(unsigned char ack);
  27          void eeprom_write(unsigned char address, unsigned char mydata);
  28          unsigned char eeprom_read(unsigned char address);
  29          
  30          
  31          unsigned long milliseconds = 0;
  32          
  33          void timer_init() {
  34   1          TMOD |= 0x01; // Timer 0, mode 1 (16-bit timer)
  35   1          TH0 = 0x00;   // High byte of Timer 0
  36   1          TL0 = 0x00;   // Low byte of Timer 0
  37   1          TR0 = 1;      // Start Timer 0
  38   1      }
  39          
  40          
  41          unsigned long get_elapsed_time() {
  42   1          unsigned int timer_value = (TH0 << 8) | TL0; // Combine high and low bytes
  43   1          return (timer_value * 12) / (11059200 / 1000); // Convert to milliseconds
  44   1      }
  45          
  46          void delay(int a) {
  47   1          int i, j;
  48   1          for (i = 0; i < a; i++) {
  49   2              for (j = 0; j < 250; j++) {
  50   3                  
  51   3                  _nop_(); 
  52   3              }
  53   2          }
  54   1      }
C51 COMPILER V9.60.7.0   UART                                                              12/24/2024 04:00:53 PAGE 2   

  55          
  56          void uart_init() {
  57   1          SCON = 0x50;  
  58   1          TMOD = 0x20;  // Timer 1, mode 2
  59   1          TH1 = 0xFD;   // Baud rate 9600
  60   1          TR1 = 1;      // Start Timer 1
  61   1      }
  62          
  63          /*void uart_init() {
  64              SCON = 0x50;  // 8-bit UART mode, REN enabled
  65              TMOD = 0x20;  // Timer 1, mode 2 (auto-reload)
  66              TH1 = 0xF9;   // Baud rate 2400
  67              TR1 = 1;      // Start Timer 1
  68          }*/
  69          
  70          void uart_tx(char ch) {
  71   1          SBUF = ch;
  72   1          while (TI == 0);
  73   1          TI = 0;
  74   1      }
  75          
  76          char uart_rx() {
  77   1          while (RI == 0);
  78   1          RI = 0;
  79   1          return SBUF;
  80   1      }
  81          
  82          void lcd_cmd(unsigned char ch) {
  83   1          P2 = ch;
  84   1          rs = 0;
  85   1          rw = 0;
  86   1          en = 1;
  87   1          delay(10);
  88   1          en = 0;
  89   1      }
  90          
  91          void lcd_init() {
  92   1          lcd_cmd(0x38); // 8-bit mode
  93   1          lcd_cmd(0x0C); // Display ON, Cursor OFF
  94   1          lcd_cmd(0x01); // Clear Display
  95   1          lcd_cmd(0x80); // Set Cursor to Line 1
  96   1      }
  97          
  98          void lcd_data(unsigned char ch) {
  99   1          P2 = ch;
 100   1          rs = 1;
 101   1          rw = 0;
 102   1          en = 1;
 103   1          delay(10);
 104   1          en = 0;
 105   1      }
 106          
 107          void lcd_string(char *str) {
 108   1          int k = 0;
 109   1          while (str[k] != '\0') {
 110   2              lcd_data(str[k]);
 111   2              k++;
 112   2          }
 113   1      }
 114          
 115          void i2c_start() {
 116   1          SDA = 1;
C51 COMPILER V9.60.7.0   UART                                                              12/24/2024 04:00:53 PAGE 3   

 117   1          SCK = 1;
 118   1          delay(1);
 119   1          SDA = 0;
 120   1          delay(1);
 121   1          SCK = 0;
 122   1      }
 123          
 124          void i2c_stop() {
 125   1          SDA = 0;
 126   1          SCK = 1;
 127   1          delay(1);
 128   1          SDA = 1;
 129   1      }
 130          
 131          void i2c_write(unsigned char mydata) {
 132   1          int i;
 133   1          for (i = 0; i < 8; i++) {
 134   2              SDA = (mydata & 0x80) ? 1 : 0;
 135   2              mydata <<= 1;
 136   2              SCK = 1;
 137   2              delay(1);
 138   2              SCK = 0;
 139   2          }
 140   1          // Acknowledge
 141   1          SDA = 1;
 142   1          SCK = 1;
 143   1          delay(1);
 144   1          SCK = 0;
 145   1      }
 146          
 147          unsigned char i2c_read(unsigned char ack) {
 148   1          unsigned char mydata = 0;
 149   1          int i;
 150   1          SDA = 1; // Release SDA for input
 151   1          for (i = 0; i < 8; i++) {
 152   2              SCK = 1;
 153   2              delay(1);
 154   2              mydata = (mydata << 1) | SDA;
 155   2              SCK = 0;
 156   2          }
 157   1          // Send Acknowledge
 158   1          SDA = ack ? 0 : 1;
 159   1          SCK = 1;
 160   1          delay(1);
 161   1          SCK = 0;
 162   1          return mydata;
 163   1      }
 164          
 165          void eeprom_write(unsigned char address, unsigned char mydata) {
 166   1          i2c_start();
 167   1          i2c_write(0xA0);       // EEPROM write address
 168   1          i2c_write(address);    // Memory location
 169   1          i2c_write(mydata);       // Data to write
 170   1          i2c_stop();
 171   1          delay(10);
 172   1      }
 173          
 174          unsigned char eeprom_read(unsigned char address) {
 175   1          unsigned char mydata;
 176   1          i2c_start();
 177   1          i2c_write(0xA0);       // EEPROM write address
 178   1          i2c_write(address);    // Memory location
C51 COMPILER V9.60.7.0   UART                                                              12/24/2024 04:00:53 PAGE 4   

 179   1          i2c_start();
 180   1          i2c_write(0xA1);       // EEPROM read address
 181   1          mydata = i2c_read(0);    // Read data
 182   1          i2c_stop();
 183   1          return mydata;
 184   1      }
 185          
 186          void display_rate_on_lcd(unsigned long rate) {
 187   1          char rate_str[16];
 188   1          int i = 0, j;
 189   1          char temp;
 190   1      
 191   1          // Convert rate to string by extracting digits
 192   1          if (rate == 0) {
 193   2              rate_str[i++] = '0'; // Handle the case where rate is 0
 194   2          } else {
 195   2              while (rate > 0 && i < (sizeof(rate_str) - 1)) {
 196   3                  rate_str[i++] = (rate % 10) + '0'; 
 197   3                  rate /= 10;
 198   3              }
 199   2      
 200   2              // Reverse the string in place to correct digit order
 201   2              for (j = 0; j < i / 2; j++) {
 202   3                  temp = rate_str[j];
 203   3                  rate_str[j] = rate_str[i - j - 1];
 204   3                  rate_str[i - j - 1] = temp;
 205   3              }
 206   2          }
 207   1      
 208   1          
 209   1          rate_str[i++] = ' ';
 210   1          rate_str[i++] = 'b';
 211   1          rate_str[i++] = 'p';
 212   1          rate_str[i++] = 's';
 213   1          rate_str[i] = '\0'; // Null-terminate the string
 214   1      
 215   1          
 216   1          lcd_cmd(0x01); // Clear LCD
 217   1          lcd_string("Trx @ :");
 218   1      
 219   1          
 220   1          lcd_cmd(0xC0); 
 221   1          lcd_string(rate_str);
 222   1      }
 223          
 224          
 225          void main() {
 226   1          unsigned char address = 0x00;          // Start address for EEPROM write
 227   1          unsigned char transmit_address = 0x00; // Address for EEPROM read during transmission
 228   1          char received_char;
 229   1          unsigned long start_time, current_time, elapsed_time;
 230   1          unsigned long transmitted_bytes = 0;
 231   1          unsigned long byte_count = 0;
 232   1          unsigned long receiving_rate = 0;     
 233   1          unsigned long transmitting_rate = 0;  
 234   1      
 235   1          uart_init();
 236   1          lcd_init();
 237   1          timer_init();
 238   1          lcd_string("Wating for Data");
 239   1      
 240   1          start_time = get_elapsed_time(); // Initialize timer for speed calculation
C51 COMPILER V9.60.7.0   UART                                                              12/24/2024 04:00:53 PAGE 5   

 241   1      
 242   1          while (1) {
 243   2              current_time = get_elapsed_time();
 244   2              elapsed_time = current_time - start_time;
 245   2      
 246   2              if (elapsed_time >= 2000) { // Update receiving speed every 2 seconds
 247   3                  receiving_rate = (byte_count * 8) / elapsed_time;
 248   3                  byte_count = 0;         // Reset byte count
 249   3                  start_time = current_time; // Reset start time
 250   3              }
 251   2      
 252   2              // Receive a character via UART
 253   2              received_char = uart_rx();
 254   2      
 255   2              if (received_char == '8') {
 256   3                  // Stop receiving and start transmitting
 257   3                  lcd_cmd(0x01); // Clear LCD
 258   3                  lcd_string("Preparing Transmit");
 259   3      
 260   3                  start_time = get_elapsed_time(); // Reset timer for transmission rate calculation
 261   3                  transmitted_bytes = 0;
 262   3      
 263   3                  while (transmit_address < address) {
 264   4                      // Read data from EEPROM
 265   4                      char data_to_transmit = eeprom_read(transmit_address);
 266   4      
 267   4                      // Transmit data via UART
 268   4                      uart_tx(data_to_transmit);
 269   4      
 270   4                      // Increment transmit address and transmitted bytes
 271   4                      transmit_address++;
 272   4                      transmitted_bytes++;
 273   4      
 274   4                      // Calculate transmission rate
 275   4                      current_time = get_elapsed_time();
 276   4                      elapsed_time = current_time - start_time;
 277   4                      transmitting_rate = (transmitted_bytes * 8) / elapsed_time;
 278   4      
 279   4                      // Display rate on the LCD
 280   4                      display_rate_on_lcd(transmitting_rate);
 281   4                  }
 282   3      
 283   3                  // After transmission, show "Transmission Done" on the LCD
 284   3                  lcd_cmd(0x01); // Clear LCD
 285   3                  lcd_string("Transmission Done");
 286   3                  break; // Exit the main loop
 287   3              } else {
 288   3                  // Save the character in EEPROM
 289   3                  eeprom_write(address, received_char);
 290   3                  byte_count++; // Increment byte count
 291   3      
 292   3                  // Update LCD with "Receiving"
 293   3                  lcd_cmd(0x01); // Clear LCD
 294   3                  lcd_string("Receiving :");
 295   3                  lcd_data(received_char);
 296   3      
 297   3                  // Increment the EEPROM address
 298   3                  address++;
 299   3                  if (address == 0x00) {  // Handle address overflow
 300   4                      lcd_cmd(0x01);
 301   4                      lcd_string("EEPROM Full!");
 302   4                      break; // Stop further execution
C51 COMPILER V9.60.7.0   UART                                                              12/24/2024 04:00:53 PAGE 6   

 303   4                  }
 304   3              }
 305   2      
 306   2              
 307   2              delay(100);
 308   2          }
 309   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1129    ----
   CONSTANT SIZE    =     86    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4      65
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
